<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>

  <PropertyGroup>
    <MonoLLVMHostOS Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">linux</MonoLLVMHostOS>
    <MonoLLVMHostOS Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">osx</MonoLLVMHostOS>
    <MonoLLVMHostOS Condition="'$(OS)' == 'Windows_NT'">win</MonoLLVMHostOS>
    <MonoLLVMClangVersion Condition="'$(MonoLLVMHostOS)' == 'linux'">$(runtimelinuxx64MicrosoftNETCoreRuntimeMonoLLVMWasmTransportVersion)</MonoLLVMClangVersion>
    <MonoLLVMClangVersion Condition="'$(MonoLLVMHostOS)' == 'win'">$(runtimewinx64MicrosoftNETCoreRuntimeMonoLLVMWasmTransportVersion)</MonoLLVMClangVersion>
    <MonoLLVMClangVersion Condition="'$(MonoLLVMHostOS)' == 'osx'">$(runtimeosxx64MicrosoftNETCoreRuntimeMonoLLVMWasmTransportVersion)</MonoLLVMClangVersion>
  </PropertyGroup>

  <PropertyGroup>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' and '$(BuildOS)' != 'Windows_NT'">Unix Makefiles</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' and '$(BuildOS)' == 'Windows_NT'">Ninja</CMakeGenerator>
    <_VCVarsScriptName Condition="'$(BuildOS)' == 'Windows_NT'">vcvars64.bat</_VCVarsScriptName>
    <_VCVarsScriptName Condition="'$(BuildOS)' == 'Windows_NT' and '$(TargetArchitecture)' == 'arm64'">vcvarsamd64_arm64.bat</_VCVarsScriptName>
    <_VCVarsScriptName Condition="'$(BuildOS)' == 'Windows_NT' and '$(TargetArchitecture)' == 'arm'">vcvarsamd64_arm.bat</_VCVarsScriptName>
    <_SetupEnvironment Condition="'$(BuildOS)' == 'Windows_NT'">
    :: VisualStudio includes vswhere.exe that can be used to locate current VisualStudio installation.
    set VSWHERE_TOOLS_BIN=%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe
    set VS_VCINSTALL_DIR=

    :: Try to locate installed VisualStudio VC environment.
    if "%VCINSTALLDIR%" == "" if exist "%VSWHERE_TOOLS_BIN%" (
        for /f "tokens=*" %%a in ('"%VSWHERE_TOOLS_BIN%" -latest -prerelease -property installationPath') do (
            set VS_VCINSTALL_DIR=%%a\VC\
        )
    )

    if NOT "%VCINSTALLDIR%" == "" set VS_VCINSTALL_DIR=%VCINSTALLDIR%

    :: Run VS build environment script.
    call "%VS_VCINSTALL_DIR%\Auxiliary\Build\$(_VCVarsScriptName)"

    </_SetupEnvironment>
    <_BuildCommand Condition="'$(CMakeGenerator)' == 'Unix Makefiles'">$(_SetupEnvironment) make -j$([System.Environment]::ProcessorCount)</_BuildCommand>
    <_BuildCommand Condition="'$(CMakeGenerator)' == 'Ninja'">$(_SetupEnvironment) ninja </_BuildCommand>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="runtime.$(MonoLLVMHostOS)-$(TargetArchitecture).Microsoft.NETCore.Runtime.Mono.LLVM.Wasm.Transport"
                      Version="$(MonoLLVMClangVersion)"
                      PackageArch="$(TargetArchitecture)"
                      Condition="'$(TargetArchitecture)' != ''" />
    <PackageReference Include="runtime.$(MonoLLVMHostOS)-$(BuildArchitecture).Microsoft.NETCore.Runtime.Mono.LLVM.Wasm.Transport"
                      Version="$(MonoLLVMClangVersion)"
                      PackageArch="$(BuildArchitecture)"
                      Condition="'$(BuildArchitecture)' != ''" />
    <_PackageReferenceDeduplicated Include="@(PackageReference->Distinct())" />
    <PackageReference Remove="@(PackageReference)" />
    <PackageReference Include="@(_PackageReferenceDeduplicated->Distinct())" />
  </ItemGroup>

  <Target Name="CopyLLVMToTree" BeforeTargets="Build">
    <ItemGroup>
      <LLVMFiles Include="$(NuGetPackageRoot)\$([System.String]::Copy(%(PackageReference.Identity)).ToLowerInvariant())\%(PackageReference.Version)\tools\$(MonoLLVMHostOS)-%(PackageReference.PackageArch)\**"
                 FileArch="%(PackageReference.PackageArch)"
                 Condition="$([System.String]::Copy(%(PackageReference.Identity)).Contains('Microsoft.NETCore.Runtime.Mono.LLVM.Wasm.Transport')) == 'true'" />
    </ItemGroup>
    <Copy SourceFiles="@(LLVMFiles)" DestinationFolder="$(MonoLLVMDir)\%(LLVMFiles.FileArch)\%(RecursiveDir)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
    <Message Importance="High" Text="** Building WASI SDK with Clang:  $(BuildLLVM)" />
    <Message Importance="High" Text="** Packaging WASI SDK with Clang: $(PackageLLVM)" />
    <Message Importance="High" Text="** (These values should differ for cross-compilation)" />
  </Target>

  <Target Name="BuildLibc" AfterTargets="CopyLLVMToTree">
    <Exec WorkingDirectory="$(MSBuildThisFileDirectory)"
      Command="make -C src/wasi-libc CC=$(BuildLLVM)/bin/clang AR=$(BuildLLVM)/bin/llvm-ar NM=$(BuildLLVM)/bin/llvm-nm SYSROOT=$(SysrootDir) OBJDIR=$(LibcBuildDir)"
      IgnoreStandardErrorWarningFormat="true" />
    <Exec WorkingDirectory="$(MSBuildThisFileDirectory)"
      Command="make -C src/wasi-libc CC=$(BuildLLVM)/bin/clang AR=$(BuildLLVM)/bin/llvm-ar NM=$(BuildLLVM)/bin/llvm-nm SYSROOT=$(SysrootDir) OBJDIR=$(LibcBuildDir) THREAD_MODEL=posix"
      IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="BuildCompilerRt" AfterTargets="BuildLibc">
    <!-- 
      build/compiler-rt.BUILT: build/llvm.BUILT build/wasi-libc.BUILT
	# Do the build, and install it.
	mkdir -p build/compiler-rt
	cd build/compiler-rt && cmake -G Ninja \
		-DCMAKE_SYSROOT=$(BUILD_PREFIX)/share/wasi-sysroot \
		-DCMAKE_C_COMPILER_WORKS=ON \
		-DCMAKE_CXX_COMPILER_WORKS=ON \
		-DCMAKE_AR=$(BUILD_PREFIX)/bin/ar \
		-DCMAKE_MODULE_PATH=$(ROOT_DIR)/cmake \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_TOOLCHAIN_FILE=$(ROOT_DIR)/wasi-sdk.cmake \
		-DCOMPILER_RT_BAREMETAL_BUILD=On \
		-DCOMPILER_RT_BUILD_XRAY=OFF \
		-DCOMPILER_RT_INCLUDE_TESTS=OFF \
		-DCOMPILER_RT_HAS_FPIC_FLAG=OFF \
		-DCOMPILER_RT_ENABLE_IOS=OFF \
		-DCOMPILER_RT_DEFAULT_TARGET_ONLY=On \
		-DWASI_SDK_PREFIX=$(BUILD_PREFIX) \
		-DCMAKE_C_FLAGS="$(DEBUG_PREFIX_MAP)" \
		-DLLVM_CONFIG_PATH=$(ROOT_DIR)/build/llvm/bin/llvm-config \
		-DCOMPILER_RT_OS_DIR=wasi \
		-DCMAKE_INSTALL_PREFIX=$(PREFIX)/lib/clang/$(CLANG_VERSION)/ \
		-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
		$(LLVM_PROJ_DIR)/compiler-rt/lib/builtins
	DESTDIR=$(DESTDIR) ninja $(NINJA_FLAGS) -C build/compiler-rt install
	# Install clang-provided headers.
	cp -R $(ROOT_DIR)/build/llvm/lib/clang $(BUILD_PREFIX)/lib/
	touch build/compiler-rt.BUILT
    -->
    <ItemGroup>
      <_CompilerRtBuildArgs Include="-DCMAKE_SYSROOT=$(SysrootDir)" />
      <_CompilerRtBuildArgs Include="-DCMAKE_C_COMPILER_WORKS:BOOL=ON" />
      <_CompilerRtBuildArgs Include="-DCMAKE_CXX_COMPILER_WORKS:BOOL=ON" />
      <_CompilerRtBuildArgs Include="-DCMAKE_MODULE_PATH=$(MSBuildThisFileDirectory)/cmake" />
      <_CompilerRtBuildArgs Include="-DCMAKE_BUILD_TYPE=RelWithDebInfo" />
      <_CompilerRtBuildArgs Include="-DCMAKE_TOOLCHAIN_FILE=$(MSBuildThisFileDirectory)/microsoft-wasi-sdk.cmake" />
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_BAREMETAL_BUILD:BOOL=ON" />
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_BUILD_XRAY:BOOL=OFF" />
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF" />
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_HAS_FPIC_FLAG:BOOL=OFF" />
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_ENABLE_IOS:BOOL=OFF" />
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON"/>
      <_CompilerRtBuildArgs Include="-DBUILD_LLVM_PREFIX=$(BuildLLVM)"/>
      <_CompilerRtBuildArgs Include="-DCMAKE_C_FLAGS='-fdebug-prefix-map=$(MSBuildThisFileDirectory)=wasisdk://v$(WasiSdkVersion)'"/>
      <_CompilerRtBuildArgs Include="-DCOMPILER_RT_OS_DIR=wasi"/>
      <_CompilerRtBuildArgs Include="-DCMAKE_INSTALL_PREFIX=$(CompilerRtDir)/lib/clang/14.0.0/"/>
      <_CompilerRtBuildArgs Include="-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"/>
    </ItemGroup>
    <Message Importance="High" Text="Running: $(_SetupEnvironment) cmake $(MSBuildThisFileDirectory)/src/llvm-project/compiler-rt/lib/builtins -G '$(CMakeGenerator)' @(_CompilerRtBuildArgs->'%(Identity)',' ')" />
    <MakeDir Directories="$(CompilerRtDir)" Condition="!Exists('$(CompilerRtDir)')" />
    <Exec WorkingDirectory="$(CompilerRtDir)"
      Command="$(_SetupEnvironment) cmake $(MSBuildThisFileDirectory)/src/llvm-project/compiler-rt/lib/builtins -G '$(CMakeGenerator)' @(_CompilerRtBuildArgs->'%(Identity)',' ')"
      IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="Build" AfterTargets="CopyLLVMToTree" />
  <Target Name="Test" />
  <Target Name="Pack" DependsOnTargets="Build">
    <MSBuild Projects="eng/nuget/packages.builds" Targets="Build" />
  </Target>
</Project>
